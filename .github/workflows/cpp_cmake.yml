name: C++ CMake CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
    contents: read

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    strategy:
        fail-fast: false
        matrix:
            build-configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      working-directory: ${{github.workspace}}
      run: cmake -A x64 -B build -DCMAKE_BUILD_TYPE=${{matrix.build-configuration}}

    - name: Build
      # Build your program with the given configuration
      working-directory: ${{github.workspace}}
      run: cmake --build build --config ${{matrix.build-configuration}} -j ${{steps.cpu-cores.outputs.count}}
      
