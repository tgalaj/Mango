layout( local_size_x = 10, local_size_y = 10 ) in;

uniform mat4  model;
uniform bool  pins[5];
uniform vec3  Gravity;
uniform float ParticleMass;
uniform float ParticleInvMass;
uniform float SpringK;
uniform float RestLengthHoriz;
uniform float RestLengthVert;
uniform float RestLengthDiag;
uniform float DeltaT;
uniform float DampingConst;
uniform bool shouldSelfCollide;

const float sphereRadius = 1.0f;
const vec3  spherePos    = vec3(7.0, -0.8, -2.0);
const vec3  planePos     = vec3(0, -2, 0);

const float delta_distance  = 0.02; // Small distance offset between collider and cloth
const float max_deform_rate = 0.08;

layout(std430, binding=0) buffer PosIn 
{
  vec4 PositionIn[];
};

layout(std430, binding=1) buffer PosOut 
{
  vec4 PositionOut[];
};

layout(std430, binding=2) buffer VelIn 
{
  vec4 VelocityIn[];
};

layout(std430, binding=3) buffer VelOut 
{
  vec4 VelocityOut[];
};

void sphereConstraint(inout vec3 p, inout vec3 v)
{
	vec4 pp = model * vec4(p, 1);
	
	vec3 delta = pp.xyz - spherePos;
	float dist = length(delta);
	
	if(dist < sphereRadius + delta_distance)
	{
		p += (sphereRadius + delta_distance - dist) * delta / dist;
		v = v * (1.0 - 200 * DeltaT);
	}
}

void clothConstraint(inout vec3 p, inout vec3 v, uint noParticles, uint idx)
{
	float marble_radius = min(RestLengthVert, RestLengthHoriz) * 0.45;
	
	for(uint i = 0; i < noParticles; ++i)
	{
		if(distance(PositionIn[i].xyz, p) < marble_radius * 2 && i != idx)
		{
			p = p - normalize(PositionIn[i].xyz - p) * DeltaT * 8;
			v = v * (1.0 - 2000.0 * DeltaT);
				
			break;
		}
	}
}

void planeConstraint(inout vec3 p, inout vec3 v)
{
	vec4 pp = model * vec4(p, 1.0f);
	
	if(dot(pp.xyz - planePos, vec3(0, 1, 0)) < delta_distance)
	{
		float diff = ( planePos.y + delta_distance - pp.y  );
		diff = min( max( diff, 0 ), 1.0f );
		
		p.y += diff;
		v = vec3(0);
	}
}

void main() 
{
	uvec3 nParticles = gl_NumWorkGroups * gl_WorkGroupSize;
	uint idx = gl_GlobalInvocationID.y * nParticles.x + gl_GlobalInvocationID.x;
	
	vec3 p = vec3(PositionIn[idx]);
	vec3 v = vec3(VelocityIn[idx]), r;
	
	// Start with gravitational acceleration and add the spring
	// forces from each neighbor
	vec3 force = Gravity * ParticleMass;
	
	// Particle above
	if( gl_GlobalInvocationID.y < nParticles.y - 1 ) 
	{
		r = PositionIn[idx + nParticles.x].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthVert);
	} 
	
	// Below
	if( gl_GlobalInvocationID.y > 0 ) 
	{
		r = PositionIn[idx - nParticles.x].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthVert);
	} 
	
	// Left
	if( gl_GlobalInvocationID.x > 0 ) 
	{
		r = PositionIn[idx-1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthHoriz);
	} 
	
	// Right
	if( gl_GlobalInvocationID.x < nParticles.x - 1 ) 
	{
		r = PositionIn[idx + 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthHoriz);
	}
	
	// Diagonals
	// Upper-left
	if( gl_GlobalInvocationID.x > 0 && gl_GlobalInvocationID.y < nParticles.y - 1 ) 
	{
		r = PositionIn[idx + nParticles.x - 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	
	// Upper-right
	if( gl_GlobalInvocationID.x < nParticles.x - 1 && gl_GlobalInvocationID.y < nParticles.y - 1) 
	{
		r = PositionIn[idx + nParticles.x + 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	
	// lower -left
	if( gl_GlobalInvocationID.x > 0 && gl_GlobalInvocationID.y > 0 ) 
	{
		r = PositionIn[idx - nParticles.x - 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	
	// lower-right
	if( gl_GlobalInvocationID.x < nParticles.x - 1 && gl_GlobalInvocationID.y > 0 ) 
	{
		r = PositionIn[idx - nParticles.x + 1].xyz - p;
		force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
	}
	
	force += -DampingConst * v;
	
	// Apply simple Euler integrator
	vec3 a = force * ParticleInvMass;
	vec3 p2 = p + v * DeltaT + 0.5 * a * DeltaT * DeltaT;
	
	v = v + a * DeltaT;
	
	if(shouldSelfCollide)
	{
		clothConstraint (p2, v, nParticles.x * nParticles.y, idx);
	}
	
	planeConstraint (p2, v);
	sphereConstraint(p2, v);
	
	VelocityOut[idx] = vec4(v, 0.0);//vec4( v + a * DeltaT, 0.0);
	PositionOut[idx] = vec4(p2, 1.0);//vec4(p2 , 1.0);
	
	// Pin a few of the top verts
	if( gl_GlobalInvocationID.y == nParticles.y - 1      && 
		(gl_GlobalInvocationID.x == 0                    && pins[0] || 
		 gl_GlobalInvocationID.x == nParticles.x / 4     && pins[1] ||
		 gl_GlobalInvocationID.x == nParticles.x * 2 / 4 && pins[2] ||
		 gl_GlobalInvocationID.x == nParticles.x * 3 / 4 && pins[3] ||
		 gl_GlobalInvocationID.x == nParticles.x - 1     && pins[4]   )) 
	{
		PositionOut[idx] = vec4(p,1.0);
		VelocityOut[idx] = vec4(0,0,0,0);
	}
}